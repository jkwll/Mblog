<%@ page contentType="text/html; charset=utf-8" language="java"%>
<%@ taglib prefix="s" uri="/struts-tags"%>
<html>
<head>
<%@ include file="/public/include.jsp"%>
<title>java代理模式</title>
</head>
<body>
	<%@ include file="/public/header.jsp"%>
	<article class="aboutcon">
		<%-- 头的下方--%>
		<%@ include file="/public/header2.jsp"%>
		<div class="index_about">
			<%-- 文章标题 --%>
			<%@ include file="/public/title.jsp"%>
			<div class="book left" style="width: 96.553%;">
				<%-- 正文 --%>
				<h1 style="margin: 10px 0px; padding: 3px 10px; box-sizing: border-box; font-size: 24.5px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 1.5; background: rgba(247, 247, 247, 0.298039); border-left: 15px solid rgba(0, 122, 255, 0.298039); border-right: 15px solid rgba(0, 122, 255, 0.298039); white-space: normal;">代理模式</h1><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">代理模式是常见设计模式的一种，代理模式的定义是：<span style="margin: 0px; padding: 0px; box-sizing: border-box; font-weight: 700;">为其他对象提供一种<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%90%86" target="_blank" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: transparent;">代理</a>以控制对这个对象的访问</span>。</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><h2 style="margin: 10px 0px; padding: 3px 10px; box-sizing: border-box; font-size: 21px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 1.5; border-left: 10px solid rgba(82, 168, 236, 0.298039); background: rgba(247, 247, 247, 0.298039); white-space: normal;">静态代理</h2><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">理解设计模式是比较枯燥的，所以还是以举例子的方式来进行理解，</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">例如：公司开年会想找个明星来表演，那么并不会直接联系明星（主要还是联系不上），而是会联系明星的经纪人，明星就是被代理的对象，而经纪人就是代理对象。明星只需要准备来参加年会时应该表演什么节目就可以，其他的出场费之类的事情就交给经纪人来处理就好了。代理对象可以理解为被代理对象的扩展，能做被代理对象不能做的事情，也可以调用代理对象做事情。</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">那么用代码实现这个场景是什么样子的呢？</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">执行合作方法的接口</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">/**
&nbsp;*&nbsp;@Description:&nbsp;经纪公司接口，代理对象和被代理对象都需要实现的接口&nbsp;*/public&nbsp;interface&nbsp;Company&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;合作&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;cooperation();}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">被代理对象</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">/**
&nbsp;*&nbsp;@Description:&nbsp;目标对象-明星（被代理对象）&nbsp;*/public&nbsp;class&nbsp;Start&nbsp;implements&nbsp;Company&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;cooperation()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;is&nbsp;show&nbsp;time&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">代理对象</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">/**
&nbsp;*&nbsp;@Description:&nbsp;经纪人（代理对象）&nbsp;*/public&nbsp;class&nbsp;Agent&nbsp;implements&nbsp;Company&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Company&nbsp;company;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Agent(Company&nbsp;company)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.company&nbsp;=&nbsp;company;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;cooperation()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;收出场费，化妆等等&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;company.cooperation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;收拾行李，打道回府&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">测试类</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">import&nbsp;org.junit.Test;/**
&nbsp;*&nbsp;@Description:&nbsp;测试类&nbsp;*/public&nbsp;class&nbsp;ProxyTest&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;@Test
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;AnnualMeeting()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//目标对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start&nbsp;start&nbsp;=&nbsp;new&nbsp;Start();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//构建代理对象，生成代理关系
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Agent&nbsp;agent&nbsp;=&nbsp;new&nbsp;Agent(start);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//用代理对象执行被代理对象的动作&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;agent.cooperation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">输出结果：</p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">收出场费，化妆等等is&nbsp;show&nbsp;time收拾行李，打道回府</pre><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">静态代理的特点是：可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。有时候不方便修改别人的代码或者是引入的一个功能，需要进行功能扩展一下才能适用于自己的业务实现，可以使用代理模式来进行设计。</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">但是静态代理的实现基础是一个目标对象对应一个代理对象，并且在编译时就已经维护好了代理关系，如果目标对象是多个那么就会需要多个代理对象，这样在更新目标的对象的时候还需要更新代理对象，当代理对象持续增加时维护成本就变得非常困难。</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">针对于这种情况，动态代理应运而生。</p><h2 style="margin: 10px 0px; padding: 3px 10px; box-sizing: border-box; font-size: 21px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 1.5; border-left: 10px solid rgba(82, 168, 236, 0.298039); background: rgba(247, 247, 247, 0.298039); white-space: normal;">动态代理</h2><h3 style="margin: 10px 0px; padding: 2px 5px; box-sizing: border-box; font-size: 16px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 1.5; border-left: 5px solid rgba(0, 235, 255, 0.298039); background: rgba(247, 247, 247, 0.298039); white-space: normal;">JDK代理</h3><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">动态代理的代理对象不需要和目标对象共同实现接口，而是利用JDK的API,动态的在内存中构建代理对象。</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">动态生成代理对象需要调用JDK中的java.lang.reflect.Proxy类的newProxyInstance方法，这个方法需要三个参数：</p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">@CallerSensitivepublic&nbsp;static&nbsp;Object&nbsp;newProxyInstance(ClassLoader&nbsp;loader,]Class&lt;?&gt;[]&nbsp;interfaces,InvocationHandler&nbsp;h)</pre><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 15px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;"><span class="typ" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(66, 113, 174);">ClassLoader</span><span class="pln" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);"> loader</span><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">：类加载器，用来加载目标对象类，因为是在运行时获得目标对象，所以肯定需要用到反射。</span><br style="margin: 0px; padding: 0px; box-sizing: border-box;"/><span class="typ" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(66, 113, 174);">Class</span><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">&lt;?&gt;[]</span><span class="pln" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);"> interfaces</span><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">：目标对象类实现的接口集合，这些接口中定义目标对象可以执行的方法。</span><br style="margin: 0px; padding: 0px; box-sizing: border-box;"/><span class="typ" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(66, 113, 174);">InvocationHandler</span><span class="pln" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);"> h</span><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">：这个参数代表的是动态代理对象在调用方法的时候,会将方法转发到哪一个</span><span class="pln" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">invocationHandler</span><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">对象身上，</span><span class="typ" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(66, 113, 174);">InvocationHandler</span><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">是个接口，</span><br style="margin: 0px; padding: 0px; box-sizing: border-box;"/><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">需要自己实现它，然后定义自己的动态代理执行方法。</span><br style="margin: 0px; padding: 0px; box-sizing: border-box;"/><span class="pun" style="margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(77, 77, 76);">创建包含动态代理对象具体执行方法的实现类。</span></pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">import&nbsp;java.lang.reflect.InvocationHandler;import&nbsp;java.lang.reflect.Method;/**
&nbsp;*&nbsp;@Description:&nbsp;包含动态代理对象具体执行方法的实现类&nbsp;*/public&nbsp;class&nbsp;MyInvocationHandler&nbsp;implements&nbsp;InvocationHandler&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Company&nbsp;company;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;MyInvocationHandler(Company&nbsp;company)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.company&nbsp;=&nbsp;company;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;invoke(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args)&nbsp;throws&nbsp;Throwable
&nbsp;&nbsp;&nbsp;&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;收出厂费，化妆等&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//具体执行方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;result&nbsp;=&nbsp;method.invoke(company,args);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;收拾现场，卸妆，打道回府&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">测试类</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">import&nbsp;org.junit.Test;import&nbsp;java.lang.reflect.Proxy;/**
&nbsp;*&nbsp;@Description:&nbsp;测试类&nbsp;*/public&nbsp;class&nbsp;DynamicProxyTest&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;@Test
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;AnnualMeeting()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建目标对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Company&nbsp;start&nbsp;=&nbsp;new&nbsp;Start();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建代理对象需要执行的方法处理对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyInvocationHandler&nbsp;myInvocationHandler&nbsp;=&nbsp;new&nbsp;MyInvocationHandler(start);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获得目标对象的类加载器
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassLoader&nbsp;classLoader&nbsp;=&nbsp;start.getClass().getClassLoader();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建动态代理对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Company&nbsp;proxy&nbsp;=&nbsp;(Company)&nbsp;Proxy.newProxyInstance(classLoader,start.getClass().getInterfaces(),myInvocationHandler);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//用动态代理对象执行目标对象的方法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy.cooperation();
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">输出结果：</p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">收出厂费，化妆等is&nbsp;show&nbsp;time收拾现场，卸妆，打道回府</pre><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">JDK动态代理的特点：代理对象不需要实现接口，但是目标对象必须实现接口。</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">那么如果在实际的业务中目标对象确实没有实现接口，怎么办呢？</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">遇到这种情况的时候就需要时cglib动态代理了。</p><h3 style="margin: 10px 0px; padding: 2px 5px; box-sizing: border-box; font-size: 16px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 1.5; border-left: 5px solid rgba(0, 235, 255, 0.298039); background: rgba(247, 247, 247, 0.298039); white-space: normal;">Cglib代理</h3><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">Cglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展.</p><ul style="margin-bottom: 10px; margin-left: 30px; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);" class=" list-paddingleft-2"><li><p>JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现。</p></li><li><p>Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)。</p></li><li><p>Cglib包的底层是通过使用一个小块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</p></li></ul><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">在实现cglib代理时需要引入cglib的jar包，但是spring核心功能已经包含了cglib的功能，所以引入spring-core的jar包就可以了。</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">需要注意的是：<span style="margin: 0px; padding: 0px; box-sizing: border-box; font-weight: 700;">代理的类不能为final,否则报错，目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法。</span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">没有实现接口的目标对象类</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">/**
&nbsp;*&nbsp;@Description:&nbsp;没有经纪公司的明星，就行像最近以个人练习生出道的蔡徐坤&nbsp;*/public&nbsp;class&nbsp;AloneStart&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;合作&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;cooperation()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;is&nbsp;show&nbsp;time&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">生成Cglib代理对象的类</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">import&nbsp;org.mockito.cglib.proxy.Enhancer;import&nbsp;org.mockito.cglib.proxy.MethodInterceptor;import&nbsp;org.mockito.cglib.proxy.MethodProxy;import&nbsp;java.lang.reflect.Method;/**
&nbsp;*&nbsp;@Description:&nbsp;生成代理对象的类&nbsp;*/public&nbsp;class&nbsp;CglibProxy&nbsp;implements&nbsp;MethodInterceptor&nbsp;{


&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;AloneStart&nbsp;aloneStart;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;CglibProxy(AloneStart&nbsp;aloneStart)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.aloneStart&nbsp;=&nbsp;aloneStart;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;创建代理对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;getProxyInstance()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//动态代理工具类
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enhancer&nbsp;enhancer&nbsp;=&nbsp;new&nbsp;Enhancer();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//设置父类&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setSuperclass(aloneStart.getClass());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//设置回调函数调用对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setCallback(this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//返回代理对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;enhancer.create();

&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;intercept(Object&nbsp;obj,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;objects,&nbsp;MethodProxy&nbsp;methodProxy)&nbsp;throws&nbsp;Throwable
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;收出厂费，化妆等&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//执行代理方法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;methodProxy.invokeSuper(obj,objects);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;卸妆，回家&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">测试类</p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">import&nbsp;org.junit.Test;/**
&nbsp;*&nbsp;@Description:&nbsp;测试类&nbsp;*/public&nbsp;class&nbsp;CglibProxyTest&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;@Test
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;cglibTest()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建目标对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AloneStart&nbsp;aloneStart&nbsp;=&nbsp;new&nbsp;AloneStart();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建代理对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AloneStart&nbsp;startProxy&nbsp;=&nbsp;(AloneStart)&nbsp;new&nbsp;CglibProxy(aloneStart).getProxyInstance();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//用代理对象执行目标对象的方法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startProxy.cooperation();
&nbsp;&nbsp;&nbsp;&nbsp;}}</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; box-sizing: border-box; line-height: 1.5 !important;"><a title="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; outline: none; color: cornflowerblue; cursor: url(&quot;//fq.wc.lt//up/1499563659.cur&quot;), auto; background-color: rgb(245, 245, 245) !important; text-decoration: underline; border: none !important;"><div align="center"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin: 0px; padding: 0px; box-sizing: border-box; vertical-align: middle; max-width: 700px; border: none !important;"/></div></a></span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">输出结果：</p><pre class="prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 9.5px; box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; overflow: auto; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; font-family: Consolas !important; font-size: 12px !important;">收出厂费，化妆等is&nbsp;show&nbsp;time卸妆，回家</pre><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">jdk采用反射机制调用委托类的方法，而cglib采用类似索引的方式直接调用委托类方法；</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">还有需要注意的是：</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">在Spring的AOP中</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);"><span style="margin: 0px; padding: 0px; box-sizing: border-box; font-weight: 700;">如果加入容器的目标对象有实现接口,用JDK代理</span><br style="margin: 0px; padding: 0px; box-sizing: border-box;"/><span style="margin: 0px; padding: 0px; box-sizing: border-box; font-weight: 700;">如果目标对象没有实现接口,用Cglib代理</span></p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">&nbsp;参考：</p><p id="autoid-0-0-0" style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">Java的三种代理模式:&nbsp;https://www.cnblogs.com/cenyu/p/6289209.html</p><p style="margin: 10px auto; padding: 0px; box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgba(255, 255, 255, 0.8);">说说代理模式：http://www.importnew.com/26116.html</p><p><br/></p>
				<%@ include file="/public/lower.jsp"%>
			</div>
		</div>
		<%@ include file="/public/knowledge_right.jsp"%>
	</article>
	<%@ include file="/public/info.jsp"%>
	<script
		src="${ pageContext.request.contextPath }/knowledge/js/common.js"></script>
	<script
		src="${ pageContext.request.contextPath }/knowledge/js/silder.js"></script>
</body>
</html>